import { GoogleGenAI, Modality, GenerateContentParameters } from "@google/genai";
import type { Message } from '../types';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export const callGeminiModel = async (
  // FIX: Replaced deprecated `GenerateContentRequest` with `GenerateContentParameters` to resolve import error.
  contents: GenerateContentParameters['contents'],
  systemInstruction: string,
  tools?: any[]
) => {
  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents,
    config: {
      systemInstruction: systemInstruction,
      tools: tools,
    },
  });
  return response;
};

export const performWebSearch = async (query: string): Promise<{ summary: string; citations: { uri: string; title: string }[] }> => {
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: query,
      config: {
        tools: [{ googleSearch: {} }],
      },
    });

    const summary = response.text;
    const citations = response.candidates[0]?.groundingMetadata?.groundingChunks
      ?.map((c: any) => c.web)
      .filter(Boolean) || [];
    
    const uniqueCitations = Array.from(new Map(citations.map((item: any) => [item.uri, item])).values());

    return { summary, citations: uniqueCitations };
  } catch (error) {
    console.error("Web search failed:", error);
    return { summary: "Sorry, I couldn't perform the web search.", citations: [] };
  }
};

export const generateSummary = async (messages: Message[]): Promise<string> => {
  const historyText = messages
    .filter(m => m.type !== 'summary')
    .map(m => `${m.role === 'user' ? 'User' : 'AI'}: ${m.text}`)
    .join('\n');

  const prompt = `Provide a concise, neutral summary of the key points from the following conversation:\n\n---\n${historyText}\n---`;

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: prompt,
    config: {
      systemInstruction: "You are an expert at summarizing conversations. Your summary should be brief, objective, and highlight the main topics and conclusions.",
      temperature: 0.2,
    }
  });

  return response.text;
};


export const generateImage = async (prompt: string) => {
  const response = await ai.models.generateImages({
    model: 'imagen-4.0-generate-001',
    prompt: prompt,
    config: {
      numberOfImages: 1,
      outputMimeType: 'image/png',
      aspectRatio: '1:1',
    },
  });
  
  const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
  return `data:image/png;base64,${base64ImageBytes}`;
};

export const editImage = async (base64ImageData: string, mimeType: string, prompt: string): Promise<string> => {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [
                {
                    inlineData: {
                        data: base64ImageData,
                        mimeType: mimeType,
                    },
                },
                {
                    text: prompt,
                },
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
        }
    }

    throw new Error("No image was generated by the edit operation.");
};
